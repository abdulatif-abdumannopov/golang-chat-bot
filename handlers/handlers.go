package handlers

import (
	"database/sql"
	"errors"
	"fmt"
	"gopkg.in/telebot.v3"
	"log"
	"strconv"
	"sync"
)

const botUsername = "anonym_reply_bot"

var activeChats = make(map[int64]int64)
var replyChats = make(map[int64]int64)
var mu sync.Mutex

const ADMIN_ID int64 = 7751874405

var replyMarkup = &telebot.ReplyMarkup{}
var replyBtn = replyMarkup.Data("–û—Ç–≤–µ—Ç–∏—Ç—å", "reply")

func SetupHandlers(bot *telebot.Bot, db *sql.DB) {
	// –ü–µ—Ä–µ–¥–∞—ë–º db —á–µ—Ä–µ–∑ –∑–∞–º—ã–∫–∞–Ω–∏–µ
	bot.Handle("/start", func(c telebot.Context) error {
		return HandleStart(db, c)
	})
	bot.Handle(telebot.OnText, func(c telebot.Context) error {
		return HandleAnonymousMessage(bot, c)
	})
	bot.Handle(&telebot.Btn{Unique: "reply"}, func(c telebot.Context) error {
		return HandleReplyMode(c)
	})
}

// HandleStart /start

func HandleStart(db *sql.DB, c telebot.Context) error {
	args := c.Args()

	// –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	if len(args) == 0 {
		userTelegramID := c.Sender().ID
		var userID int

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
		err := db.QueryRow("SELECT id FROM users WHERE telegram = ?", userTelegramID).Scan(&userID)
		if errors.Is(err, sql.ErrNoRows) {
			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
			result, err := db.Exec("INSERT INTO users (telegram) VALUES (?)", userTelegramID)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userTelegramID, err)
				return c.Send("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î.")
			}

			// –ü–æ–ª—É—á–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
			lastInsertID, _ := result.LastInsertId()
			userID = int(lastInsertID)
		} else if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userTelegramID, err)
			return c.Send("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î.")
		}

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
		link := fmt.Sprintf("https://t.me/%s?start=%d", botUsername, userID)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Å—Å—ã–ª–∫—É
		return c.Send(fmt.Sprintf("üëã –ü—Ä–∏–≤–µ—Ç! –¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n[%s](%s)", link, link), telebot.ModeMarkdown)
	}

	// üîπ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à—ë–ª –ø–æ —Å—Å—ã–ª–∫–µ (args[0] = user_id)
	targetID, err := strconv.Atoi(args[0])
	if err != nil {
		return c.Send("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ—Ç ID –≤ –ë–î
	var telegram int
	err = db.QueryRow("SELECT telegram FROM users WHERE id = ?", targetID).Scan(&telegram)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–≤—è–∑—å "–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å -> –ø–æ–ª—É—á–∞—Ç–µ–ª—å"
	mu.Lock()
	activeChats[c.Sender().ID] = int64(telegram)
	mu.Unlock()

	return c.Send(fmt.Sprintf("‚úâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."), telebot.ModeMarkdown)
}

// HandleAnonymousMessage - –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
func HandleAnonymousMessage(bot *telebot.Bot, c telebot.Context) error {
	sender := c.Sender()
	senderTelegramID := sender.ID

	mu.Lock()
	receiverTelegramID, exists := activeChats[senderTelegramID]
	mu.Unlock()

	if !exists {
		return c.Send("‚ö† –¢—ã –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª, –∫–æ–º—É –ø–∏—Å–∞—Ç—å. –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ /start!")
	}

	// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML-—Ç–µ–≥–∏
	senderName := sender.FirstName
	if sender.Username != "" {
		senderName = fmt.Sprintf(`<a href="https://t.me/%s">%s</a>`, sender.Username, sender.FirstName)
	} else {
		senderName = fmt.Sprintf(`<a href="tg://user?id=%d">%s</a>`, senderTelegramID, sender.FirstName)
	}

	// –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
	senderInfo := fmt.Sprintf("üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: %s\nüìé ID: <code>%d</code>", senderName, senderTelegramID)

	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
	replyMarkup := &telebot.ReplyMarkup{}
	replyBtn := replyMarkup.Data("–û—Ç–≤–µ—Ç–∏—Ç—å", "reply", strconv.FormatInt(senderTelegramID, 10))
	replyMarkup.Inline(replyMarkup.Row(replyBtn))

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	messageText := fmt.Sprintf("üì© –ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n%s", c.Text())

	// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω—É ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
	if receiverTelegramID == ADMIN_ID {
		messageText += fmt.Sprintf("\n\n%s", senderInfo)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å"
	_, err := bot.Send(&telebot.User{ID: receiverTelegramID}, messageText, replyMarkup, telebot.ModeHTML) // –ó–∞–º–µ–Ω–∏–ª ModeMarkdown ‚Üí ModeHTML
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return c.Send("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
	}

	// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–≤—è–∑—å "–ø–æ–ª—É—á–∞—Ç–µ–ª—å -> –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
	mu.Lock()
	replyChats[receiverTelegramID] = senderTelegramID
	mu.Unlock()

	return c.Send("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
}

// HandleReplyMode - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è "–û—Ç–≤–µ—Ç–∏—Ç—å"
func HandleReplyMode(c telebot.Context) error {
	receiverTelegramID := c.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
	mu.Lock()
	senderTelegramID, exists := replyChats[receiverTelegramID]
	mu.Unlock()

	if !exists {
		return c.Send("‚ö† –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
	}

	// –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–≤—è–∑—å "–æ—Ç–≤–µ—Ç—á–∏–∫ -> –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
	mu.Lock()
	activeChats[receiverTelegramID] = senderTelegramID
	mu.Unlock()

	return c.Send("‚úâ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å! –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
}
